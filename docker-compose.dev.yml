version: '3.8'
services:
  emqx:
    image: 'emqx/emqx'
    container_name: 'emqx'
    env_file:
      - .env
    environment:
      - EMQX_NAME=emqx
      - EMQX_LOG__LEVEL=debug
      - EMQX_ALLOW_ANONYMOUS=false

      - EMQX_LOADED_PLUGINS=emqx_auth_http,emqx_web_hook,emqx_management,emqx_recon,emqx_retainer,emqx_dashboard
    ports:
      - 1883:1883 # MQTT
      - 8083:8083 # MQTT/WS
      - 18083:18083 # Dashboard
    volumes:
      - ./emqx/plugins:/opt/emqx/etc/plugins
    networks:
      - backend

  auth_emqx:
    tty: true
    container_name: 'auth_emqx'
    command: npm run start
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/app/firebaseConfig.json
    env_file:
      - .env
    build:
      context: ./auth_emqx
      dockerfile: Dockerfile
    volumes:
      - ./firebaseConfig.json:/app/firebaseConfig.json
    networks:
      - backend

  webhooks:
    tty: true
    container_name: 'webhooks'
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/app/firebaseConfig.json
    env_file:
      - .env
    build:
      context: ./webhooks
      dockerfile: Dockerfile
    volumes:
      - ./firebaseConfig.json:/app/firebaseConfig.json
    networks:
      - backend

  device_api:
    tty: true
    container_name: 'device_api'
    command: npm run start:dev
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/app/firebaseConfig.json
    env_file:
      - .env
    depends_on:
      - 'emqx'
    build:
      context: ./device_api
      dockerfile: Dockerfile
    volumes:
      - ./device_api/src/:/app/src/
      - ./firebaseConfig.json:/app/firebaseConfig.json
    networks:
      - backend

  actions:
    tty: true
    container_name: 'actions'
    command: npm run start:dev
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/app/firebaseConfig.json
    env_file:
      - .env
    build:
      context: ./actions
      dockerfile: Dockerfile
    volumes:
      - ./firebaseConfig.json:/app/firebaseConfig.json
      - ./actions/src/:/app/src/
    networks:
      - backend

  nginx:
    tty: true
    container_name: 'nginx'
    build:
      context: ./nginx
      dockerfile: Dockerfile.dev
    env_file:
      - .env
    ports:
      - 80:80
      - 443:443
    restart: 'unless-stopped'
    volumes:
      - ./certs/fullchain.pem:/etc/dockercerts/fullchain.pem
      - ./certs/privkey.pem:/etc/dockercerts/privkey.pem
    networks:
      - backend

  mongo:
    image: mongo
    container_name: 'mongo'
    restart: 'unless-stopped'
    env_file:
      - .env
    networks:
      - backend

  mongo-express:
    image: mongo-express
    restart: 'unless-stopped'
    container_name: 'mongo-express'
    env_file:
      - .env
    ports:
      - 8081:8081
    networks:
      - backend

  redis:
    image: "redis:alpine"
    container_name: "redis"
    networks:
      - backend

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: 'unless-stopped'
    environment:
      - REDIS_HOSTS=local:redis:6379
      - PORT=9000
    ports:
      - "9000:9000"
    networks:
      - backend

  auth:
    tty: true
    container_name: 'auth'
    restart: 'unless-stopped'
    ports:
      - 8080:8080
    depends_on:
      - mongo
      - redis
    build:
      context: ./auth
      dockerfile: Dockerfile.dev
    volumes:
      - ./auth:/app
    env_file:
      - .env
    networks:
      - backend

networks:
  backend:
