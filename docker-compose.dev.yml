version: '3.8'
services:
  emqx:
    image: 'emqx/emqx'
    container_name: 'emqx'
    env_file:
      - .env
    environment:
      - EMQX_NAME=emqx
      - EMQX_LOG__LEVEL=debug
      - EMQX_ALLOW_ANONYMOUS=true

      - EMQX_LOADED_PLUGINS=emqx_web_hook,emqx_management,emqx_recon,emqx_retainer,emqx_dashboard
    ports:
      - 1883:1883 # MQTT
      - 8083:8083 # MQTT/WS
      - 18083:18083 # Dashboard
    volumes:
      - ./emqx/plugins:/opt/emqx/etc/plugins
    networks:
      - backend

  emqx_webhooks:
    tty: true
    container_name: 'emqx_webhooks'
    env_file:
      - .env
    build:
      context: ./emqx_webhooks
      dockerfile: Dockerfile
    depends_on:
      - emqx
      - mongo
    networks:
      - backend

  # auth_emqx:
  #   tty: true
  #   container_name: 'auth_emqx'
  #   command: npm run start
  #   environment:
  #     - GOOGLE_APPLICATION_CREDENTIALS=/app/firebaseConfig.json
  #   env_file:
  #     - .env
  #   build:
  #     context: ./auth_emqx
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./firebaseConfig.json:/app/firebaseConfig.json
  #   networks:
  #     - backend

  # device_api:
  #   tty: true
  #   container_name: 'device_api'
  #   command: npm run start:dev
  #   environment:
  #     - GOOGLE_APPLICATION_CREDENTIALS=/app/firebaseConfig.json
  #   env_file:
  #     - .env
  #   depends_on:
  #     - 'emqx'
  #   build:
  #     context: ./device_api
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./device_api/src/:/app/src/
  #     - ./firebaseConfig.json:/app/firebaseConfig.json
  #   networks:
  #     - backend

  nginx:
    tty: true
    container_name: 'nginx'
    build:
      context: ./nginx
      dockerfile: Dockerfile.dev
    env_file:
      - .env
    ports:
      - 80:80
      - 443:443
    restart: 'unless-stopped'
    volumes:
      - ./certs/fullchain.pem:/etc/dockercerts/fullchain.pem
      - ./certs/privkey.pem:/etc/dockercerts/privkey.pem
    networks:
      - backend

  mongo:
    image: mongo
    container_name: 'mongo'
    restart: 'unless-stopped'
    env_file:
      - .env
    environment:
      - MONGO_INITDB_DATABASE=houseflowDB
    networks:
      - backend

  mongo-express:
    image: mongo-express
    restart: 'unless-stopped'
    container_name: 'mongo-express'
    env_file:
      - .env
    ports:
      - 8081:8081
    networks:
      - backend

  redis:
    image: 'redis:latest'
    container_name: 'redis'
    networks:
      - backend

  auth:
    tty: true
    container_name: 'auth'
    restart: 'unless-stopped'
    depends_on:
      - mongo
      - redis
    build:
      context: ./auth
      dockerfile: Dockerfile.dev
    depends_on:
      - mongo
      - redis
    volumes:
      - ./auth:/app
    env_file:
      - .env
    networks:
      - backend

  state_manager:
    tty: true
    container_name: 'state_manager'
    restart: 'unless-stopped'
    depends_on:
      - mongo
      - emqx
    build:
      context: ./state_manager
      dockerfile: Dockerfile.dev
    volumes:
      - ./state_manager:/app
    env_file:
      - .env
    networks:
      - backend

  actions:
    tty: true
    container_name: 'actions'
    restart: 'unless-stopped'
    command: 'npm run start:dev'
    depends_on:
      - mongo
      - redis
    build:
      context: ./actions
      dockerfile: Dockerfile
    volumes:
      - ./actions/src/:/app/src/
      - ./service-account.json:/app/service-account.json
    env_file:
      - .env
    networks:
      - backend

networks:
  backend:
